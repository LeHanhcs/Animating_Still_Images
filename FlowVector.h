////////////////////////////////////////////////////////////////////////////////////////////////////
/// File:	FlowVector.h.
///
/// Summary:	Declares the flow vector class.
////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include <iostream>

#include <vector>
#include <algorithm>
#include <functional>
#include <ctime> 

////////////////////////////////////////////////////////////////////////////////////////////////////
/// Def:	NEIGHBOR_DIRECTION
///
/// Summary:	A macro that defines neighbor direction.
///
/// Author:	Yc Lin
///
/// Date:	2019/10/4
////////////////////////////////////////////////////////////////////////////////////////////////////

#define NEIGHBOR_DIRECTION 8
//external libray		 =======================================================================
#include<opencv2\opencv.hpp>
//namespace				 =======================================================================

////////////////////////////////////////////////////////////////////////////////////////////////////
/// Namespace:	std
///
/// Summary:	.
////////////////////////////////////////////////////////////////////////////////////////////////////

using namespace std;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// Struct:	flowVectorTag
///
/// Summary:	A flow vector tag.
///
/// Author:	Yc Lin.
///
/// Date:	2019/10/4.
////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct flowVectorTag{
	cv::Point coordinate;
	/// Summary:	The vector.
	cv::Point2d vector;
}FLOWVECTORTAG;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// Struct:	bilinearCornerTag
///
/// Summary:	A bilinear corner tag.
///
/// Author:	Yc Lin.
///
/// Date:	2019/10/4.
////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct bilinearCornerTag{
	int index;
	/// Summary:	The weight.
	double weight;
}BILINEARCORNERTAG;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// Class:	FlowVector
///
/// Summary:	A flow vector.
///
/// Author:	Yc Lin
///
/// Date:	2019/10/4
////////////////////////////////////////////////////////////////////////////////////////////////////

class FlowVector{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	FlowVector::FlowVector(cv::Mat inputImg, vector<vector<FLOWVECTORTAG>>UI_flowVectorArray);
	///
	/// Summary:	Constructor.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// inputImg -   	The input image. 
	/// parameter2 - 	The second parameter. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	FlowVector(cv::Mat inputImg, vector<vector<FLOWVECTORTAG>>UI_flowVectorArray);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	FlowVector::FlowVector();
	///
	/// Summary:	Default constructor.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	////////////////////////////////////////////////////////////////////////////////////////////////////

	FlowVector();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void FlowVector::EigenOptimizer();
	///
	/// Summary:	Eigen optimizer.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void EigenOptimizer();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:
	/// 	void FlowVector::ShowResult(int color_R, int color_G, int color_B, string windowName,
	/// 	int windowFlag);
	///
	/// Summary:	Shows the result.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// color_R -    	The color. 
	/// color_G -    	The color g. 
	/// color_B -    	The color b. 
	/// windowName - 	Name of the window. 
	/// windowFlag - 	The window flag. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void ShowResult(int color_R, int color_G, int color_B, string windowName, int windowFlag);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	cv::Mat FlowVector::GetResultImg(int color_R, int color_G, int color_B);
	///
	/// Summary:	Gets result image.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// color_R -  	The color. 
	/// color_G -  	The color g. 
	/// color_B -  	The color b. 
	///
	/// Returns:	The result image.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	cv::Mat GetResultImg(int color_R, int color_G, int color_B);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void FlowVector::Write2AVI(int color_R, int color_G, int color_B, string gifPath);
	///
	/// Summary:	Writes a 2 a vi.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// color_R -  	The color. 
	/// color_G -  	The color g. 
	/// color_B -  	The color b. 
	/// gifPath -  	Full pathname of the GIF file. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void Write2AVI(int color_R, int color_G, int color_B, string gifPath);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	FlowVector::vector<FLOWVECTORTAG>GetFlowVector();
	///
	/// Summary:	Default constructor.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Typeparams:
	/// FLOWVECTORTAG - 	Type of the flowvectortag. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	vector<FLOWVECTORTAG>GetFlowVector();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	FlowVector::vector<vector<FLOWVECTORTAG>>GetUserFlowVector();
	///
	/// Summary:	Default constructor.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Typeparams:
	/// FLOWVECTORTAG - 	Type of the flowvectortag. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	vector<vector<FLOWVECTORTAG>>GetUserFlowVector();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	cv::Point FlowVector::GetSampleRate();
	///
	/// Summary:	Gets sample rate.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Returns:	The sample rate.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	cv::Point GetSampleRate();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	cv::Point FlowVector::GetSamplePointsN();
	///
	/// Summary:	Gets sample points n.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Returns:	The sample points n.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	cv::Point GetSamplePointsN();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void FlowVector::SetSampleRate(cv::Point sampleRate);
	///
	/// Summary:	Sets sample rate.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// sampleRate - 	The sample rate. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetSampleRate(cv::Point sampleRate);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void FlowVector::SetSamplePointsN(cv::Point samplePointsN);
	///
	/// Summary:	Sets sample points n.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// samplePointsN - 	The sample points n. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetSamplePointsN(cv::Point samplePointsN);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void FlowVector::SetFlowVector(vector<FLOWVECTORTAG> inFlowVector);
	///
	/// Summary:	Sets flow vector.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// inFlowVector - 	The in flow vector. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetFlowVector(vector<FLOWVECTORTAG> inFlowVector);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void FlowVector::SetOrgImg(cv::Mat img);
	///
	/// Summary:	Sets organisation image.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// img - 	The image. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetOrgImg(cv::Mat img);

private:
// function

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:
	/// 	cv::Mat FlowVector::DrawFlowFieldOnFrame(int color_R, int color_G, int color_B,
	/// 	cv::Mat frame);
	///
	/// Summary:	Draw flow field on frame.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// color_R -  	The color. 
	/// color_G -  	The color g. 
	/// color_B -  	The color b. 
	/// frame -    	The frame. 
	///
	/// Returns:	A cv::Mat.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	cv::Mat DrawFlowFieldOnFrame(int color_R, int color_G, int color_B, cv::Mat frame);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void FlowVector::MKvideo(vector<cv::Mat>videoVector);
	///
	/// Summary:	Kvideoes the given parameter 1.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// parameter1 - 	The first parameter. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void MKvideo(vector<cv::Mat>videoVector);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	cv::Point FlowVector::Convert2MatrixCoordinate(cv::Point imgCoordinate);
	///
	/// Summary:	Convert 2 matrix coordinate.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// imgCoordinate - 	The image coordinate. 
	///
	/// Returns:	The 2 converted matrix coordinate.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	cv::Point Convert2MatrixCoordinate(cv::Point imgCoordinate);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	bool FlowVector::IsOutOfMatrix(cv::Point p);
	///
	/// Summary:	Query if 'p' is out of matrix.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// p - 	A cv::Point to process. 
	///
	/// Returns:	True if out of matrix, false if not.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	bool IsOutOfMatrix(cv::Point p);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	int FlowVector::CoordinateTransformation_Matrix2Array(cv::Point p);
	///
	/// Summary:	Coordinate transformation matrix 2 array.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// p - 	A cv::Point to process. 
	///
	/// Returns:	An int.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	int CoordinateTransformation_Matrix2Array(cv::Point p);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	vector<BILINEARCORNERTAG> FlowVector::Calculate4CornerIndex(cv::Point p);
	///
	/// Summary:	Calculates the 4 corner index.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// p - 	A cv::Point to process. 
	///
	/// Returns:	The calculated 4 corner index.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	vector<BILINEARCORNERTAG> Calculate4CornerIndex(cv::Point p);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void FlowVector::UpdateFlowVector(vector<double>newFlowVector);
	///
	/// Summary:	Updates the flow vector described by parameter1.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// parameter1 - 	The first parameter. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void UpdateFlowVector(vector<double>newFlowVector);
// variables
	/// Summary:	The flow vector.
	vector<FLOWVECTORTAG> flowVector;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Property:	vector<vector<FLOWVECTORTAG>>UI_flowVectorArray
	///
	/// Summary:	Gets the vector.
	///
	/// Typeparams:
	/// FLOWVECTORTAG - 	Type of the flowvectortag. 
	///
	/// Value:
	////////////////////////////////////////////////////////////////////////////////////////////////////

	vector<vector<FLOWVECTORTAG>>UI_flowVectorArray;
	/// Summary:	each n pixels sample.
	int RowSampleRate;
	/// Summary:	each n pixels sample.
	int ColSampleRate;
	/// Summary:	Row points.
	int RowPointsN;
	/// Summary:	Col points.
	int ColPointsN;
	/// Summary:	init flow vector.
	int initVector;
	/// Summary:	original image.
	cv::Mat orgImg;
	cv::Mat showImg;// draw something to show
};
