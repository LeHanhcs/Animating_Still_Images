////////////////////////////////////////////////////////////////////////////////////////////////////
/// File:	sharedmatting.h.
///
/// Summary:	Declares the sharedmatting class.
////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef SHAREDMSTTING_H
#define SHAREDMSTTING_H

#include <iostream>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <cmath>
#include <vector>
//#include <cv.h>
//#include <highgui.h>

////////////////////////////////////////////////////////////////////////////////////////////////////
/// Namespace:	std
///
/// Summary:	.
////////////////////////////////////////////////////////////////////////////////////////////////////

using namespace std;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// Struct:	labelPoint
///
/// Summary:	A label point.
///
/// Author:	Yc Lin
///
/// Date:	2019/10/4
////////////////////////////////////////////////////////////////////////////////////////////////////

struct labelPoint
{
	/// Summary:	The x coordinate.
	int x;
	/// Summary:	The y coordinate.
	int y;
	/// Summary:	The label.
	int label;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// Struct:	Tuple
///
/// Summary:	A tuple.
///
/// Author:	Yc Lin
///
/// Date:	2019/10/4
////////////////////////////////////////////////////////////////////////////////////////////////////

struct Tuple
{
	/// Summary:	A cv::Scalar to process.
	cv::Scalar f;
	/// Summary:	A cv::Scalar to process.
	cv::Scalar b;
	/// Summary:	The sigmaf.
	double sigmaf;
	/// Summary:	The sigmab.
	double sigmab;

	/// Summary:	The flag.
	int flag;

};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// Struct:	Ftuple
///
/// Summary:	A ftuple.
///
/// Author:	Yc Lin
///
/// Date:	2019/10/4
////////////////////////////////////////////////////////////////////////////////////////////////////

struct Ftuple
{
	/// Summary:	A cv::Scalar to process.
	cv::Scalar f;
	/// Summary:	A cv::Scalar to process.
	cv::Scalar b;
	/// Summary:	The alphar.
	double alphar;
	/// Summary:	The confidence.
	double confidence;
};

/*程序中認定cv::Point中 x為行，y為列，可能錯誤，但對程序結果沒有影響*/

////////////////////////////////////////////////////////////////////////////////////////////////////
/// Class:	SharedMatting
///
/// Summary:	A shared matting.
///
/// Author:	Yc Lin
///
/// Date:	2019/10/4
////////////////////////////////////////////////////////////////////////////////////////////////////

class SharedMatting{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	SharedMatting::SharedMatting();
	///
	/// Summary:	Default constructor.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	////////////////////////////////////////////////////////////////////////////////////////////////////

	SharedMatting();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	SharedMatting::~SharedMatting();
	///
	/// Summary:	Destructor.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	////////////////////////////////////////////////////////////////////////////////////////////////////

	~SharedMatting();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void SharedMatting::SetImage(cv::Mat org);
	///
	/// Summary:	Sets an image.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// org - 	The organisation. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetImage(cv::Mat org);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void SharedMatting::SetTrimap(cv::Mat inTrimap);
	///
	/// Summary:	Sets a trimap.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// inTrimap - 	The in trimap. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetTrimap(cv::Mat inTrimap);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void SharedMatting::expandKnown();
	///
	/// Summary:	Expand known.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void expandKnown();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void SharedMatting::sample(cv::Point p, vector<cv::Point>& f, vector<cv::Point>& b);
	///
	/// Summary:	Samples.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// p - 	   	A cv::Point to process. 
	/// f - 	   	[in,out] A vector&lt;cv::Point&gt; to process. 
	/// b - 	   	[in,out] A vector&lt;cv::Point&gt; to process. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void sample(cv::Point p, vector<cv::Point>& f, vector<cv::Point>& b);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void SharedMatting::gathering();
	///
	/// Summary:	Gatherings this object.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void gathering();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void SharedMatting::refineSample();
	///
	/// Summary:	Refine sample.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void refineSample();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void SharedMatting::localSmooth();
	///
	/// Summary:	Local smooth.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void localSmooth();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void SharedMatting::solveAlpha();
	///
	/// Summary:	Solve alpha.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void solveAlpha();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void SharedMatting::save(char * filename);
	///
	/// Summary:	Saves the given file.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// filename - 	[in,out] If non-null, the filename to save. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void save(char * filename);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	cv::Mat SharedMatting::GetResult();
	///
	/// Summary:	Gets the result.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Returns:	The result.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	cv::Mat GetResult();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void SharedMatting::Sample(vector<vector<cv::Point> > &F, vector<vector<cv::Point> > &B);
	///
	/// Summary:	Samples.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// F - 	   	[in,out] A vector&lt;vector&lt;cv::Point&gt;&gt; to process. 
	/// B - 	   	[in,out] A vector&lt;vector&lt;cv::Point&gt;&gt; to process. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void Sample(vector<vector<cv::Point> > &F, vector<vector<cv::Point> > &B);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void SharedMatting::getMatte();
	///
	/// Summary:	Gets the matte.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void getMatte();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void SharedMatting::release();
	///
	/// Summary:	Releases this object.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void release();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	double SharedMatting::mP(int i, int j, cv::Scalar f, cv::Scalar b);
	///
	/// Summary:	M p.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// i - 	   	Zero-based index of the. 
	/// j - 	   	An int to process. 
	/// f - 	   	A cv::Scalar to process. 
	/// b - 	   	A cv::Scalar to process. 
	///
	/// Returns:	A double.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	double mP(int i, int j, cv::Scalar f, cv::Scalar b);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	double SharedMatting::nP(int i, int j, cv::Scalar f, cv::Scalar b);
	///
	/// Summary:	N p.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// i - 	   	Zero-based index of the. 
	/// j - 	   	An int to process. 
	/// f - 	   	A cv::Scalar to process. 
	/// b - 	   	A cv::Scalar to process. 
	///
	/// Returns:	A double.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	double nP(int i, int j, cv::Scalar f, cv::Scalar b);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	double SharedMatting::eP(int i1, int j1, int i2, int j2);
	///
	/// Summary:	E p.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// i1 - 	   	Zero-based index of the 1. 
	/// j1 - 	   	The first int. 
	/// i2 - 	   	Zero-based index of the 2. 
	/// j2 - 	   	The second int. 
	///
	/// Returns:	A double.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	double eP(int i1, int j1, int i2, int j2);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	double SharedMatting::pfP(cv::Point p, vector<cv::Point>& f, vector<cv::Point>& b);
	///
	/// Summary:	Pf p.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// p - 	   	A cv::Point to process. 
	/// f - 	   	[in,out] A vector&lt;cv::Point&gt; to process. 
	/// b - 	   	[in,out] A vector&lt;cv::Point&gt; to process. 
	///
	/// Returns:	A double.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	double pfP(cv::Point p, vector<cv::Point>& f, vector<cv::Point>& b);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	double SharedMatting::aP(int i, int j, double pf, cv::Scalar f, cv::Scalar b);
	///
	/// Summary:	A p.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// i - 	   	Zero-based index of the. 
	/// j - 	   	An int to process. 
	/// pf - 	   	The pf. 
	/// f - 	   	A cv::Scalar to process. 
	/// b - 	   	A cv::Scalar to process. 
	///
	/// Returns:	A double.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	double aP(int i, int j, double pf, cv::Scalar f, cv::Scalar b);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	double SharedMatting::gP(cv::Point p, cv::Point fp, cv::Point bp, double pf);
	///
	/// Summary:	G p.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// p - 	   	A cv::Point to process. 
	/// fp - 	   	The fp. 
	/// bp - 	   	The bp. 
	/// pf - 	   	The pf. 
	///
	/// Returns:	A double.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	double gP(cv::Point p, cv::Point fp, cv::Point bp, double pf);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	double SharedMatting::gP(cv::Point p, cv::Point fp, cv::Point bp, double dpf, double pf);
	///
	/// Summary:	G p.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// p - 	   	A cv::Point to process. 
	/// fp - 	   	The fp. 
	/// bp - 	   	The bp. 
	/// dpf - 	   	The dpf. 
	/// pf - 	   	The pf. 
	///
	/// Returns:	A double.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	double gP(cv::Point p, cv::Point fp, cv::Point bp, double dpf, double pf);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	double SharedMatting::dP(cv::Point s, cv::Point d);
	///
	/// Summary:	D p.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// s - 	   	A cv::Point to process. 
	/// d - 	   	A cv::Point to process. 
	///
	/// Returns:	A double.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	double dP(cv::Point s, cv::Point d);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	double SharedMatting::sigma2(cv::Point p);
	///
	/// Summary:	Sigma 2.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// p - 	A cv::Point to process. 
	///
	/// Returns:	A double.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	double sigma2(cv::Point p);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	double SharedMatting::distanceColor2(cv::Scalar cs1, cv::Scalar cs2);
	///
	/// Summary:	Distance color 2.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// cs1 - 	   	The first create structure. 
	/// cs2 - 	   	The second create structure. 
	///
	/// Returns:	A double.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	double distanceColor2(cv::Scalar cs1, cv::Scalar cs2);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	double SharedMatting::comalpha(cv::Scalar c, cv::Scalar f, cv::Scalar b);
	///
	/// Summary:	Comalphas.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// c - 	   	A cv::Scalar to process. 
	/// f - 	   	A cv::Scalar to process. 
	/// b - 	   	A cv::Scalar to process. 
	///
	/// Returns:	A double.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	double comalpha(cv::Scalar c, cv::Scalar f, cv::Scalar b);



private:
	// IplImage * pImg;
	// IplImage * trimap;
	// IplImage * matte;
	/// Summary:	The image.
	cv::Mat pImg;
	/// Summary:	The trimap.
	cv::Mat trimap;
	/// Summary:	The matte.
	cv::Mat matte;

	/// Summary:	The u t.
	vector<cv::Point> uT;
	/// Summary:	The tuples.
	vector<struct Tuple> tuples;
	/// Summary:	The ftuples.
	vector<struct Ftuple> ftuples;

	/// Summary:	The height.
	int height;
	/// Summary:	The width.
	int width;
	/// Summary:	The k i.
	int kI;
	/// Summary:	The k g.
	int kG;
	/// Summary:	Unknown的索引信息；.
	int ** unknownIndex;
	/// Summary:	The triangle.
	int ** tri;
	/// Summary:	The alpha.
	int ** alpha;
	/// Summary:	The k c.
	double kC;

	/// Summary:	Amount to increment by.
	int step;
	/// Summary:	The channels.
	int channels;
	uchar* data;

};



#endif