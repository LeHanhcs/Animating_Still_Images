////////////////////////////////////////////////////////////////////////////////////////////////////
/// File:	FlowDriver.h.
///
/// Summary:	Declares the flow driver class.
////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef FLOWDRIVER_H
#define FLOWDRIVER_H

#include <opencv2/opencv.hpp>
#include<FlowVector.h>
#include <functional>
#include<stdint.h>
#include<thread>
#include<BoundarySmoothOptimizer.h>
#include<IO_FilePath.h>

using namespace std;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// Struct:	warpedTag
///
/// Summary:	A warped tag.
///
/// Author:	Yc Lin.
///
/// Date:	2019/10/4.
////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct warpedTag{
	cv::Mat src;
	/// Summary:	Destination for the.
	cv::Mat dst;
}WARPEDTAG;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// Struct:	vectorTag
///
/// Summary:	declare a vector
///				Store the start and end of the vector
///				Type is cv::Point
///				
///
/// Author:	Yc Lin
///
/// Date:	2019/10/23
////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct vectorTag {
	cv::Point beg;
	cv::Point end;
	vectorTag(cv::Point beg_, cv::Point end_) {
		beg = beg_;
		end = end_;
	}
}VECTORTAG;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// Class:	FlowDriver
///
/// Summary:	A flow driver.
///
/// Author:	Yc Lin
///
/// Date:	2019/10/4
////////////////////////////////////////////////////////////////////////////////////////////////////

class FlowDriver
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	FlowDriver::FlowDriver(cv::Mat ROIimg);
	///
	/// Summary:	Constructor.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// ROIimg - 	The ro iimg. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	FlowDriver(cv::Mat ROIimg);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	FlowDriver::FlowDriver();
	///
	/// Summary:	Default constructor.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	////////////////////////////////////////////////////////////////////////////////////////////////////

	FlowDriver();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	FlowDriver::~FlowDriver();
	///
	/// Summary:	Destructor.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	////////////////////////////////////////////////////////////////////////////////////////////////////

	~FlowDriver();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void FlowDriver::SetBoundryConstraints(cv::Mat inMask,int select);
	///
	/// Summary:	Sets boundry constraints.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// inMask -   	The in mask. 
	/// select -   	The select. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetBoundryConstraints(cv::Mat inMask,int select);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	cv::Mat FlowDriver::GetFixedMask();
	///
	/// Summary:	Gets fixed mask.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Returns:	The fixed mask.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	cv::Mat GetFixedMask();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void FlowDriver::SetFixedMask(cv::Mat loadMask);
	///
	/// Summary:	Sets fixed mask.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// loadMask - 	The load mask. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetFixedMask(cv::Mat loadMask);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void FlowDriver::SetMattingMask(cv::Mat loadMask);
	///
	/// Summary:	Sets matting mask.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// loadMask - 	The load mask. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetMattingMask(cv::Mat loadMask);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	cv::Mat FlowDriver::GetBoundryConstraintsImg();
	///
	/// Summary:	Gets boundry constraints image.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Returns:	The boundry constraints image.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	cv::Mat GetBoundryConstraintsImg();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void FlowDriver::SetFlowVector(vector<vector<FLOWVECTORTAG>> userFlowVector);
	///
	/// Summary:	Sets flow vector.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// userFlowVector - 	The user flow vector. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetFlowVector(vector<vector<FLOWVECTORTAG>> userFlowVector);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void FlowDriver::SetUserPathArr(vector<vector<cv::Point>> inUserPathArr);
	///
	/// Summary:	Sets user path array.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// inUserPathArr - 	Array of in user paths. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetUserPathArr(vector<vector<cv::Point>> inUserPathArr);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void FlowDriver::SetSampleRate(cv::Point sampleRate);
	///
	/// Summary:	Sets sample rate.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// sampleRate - 	The sample rate. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetSampleRate(cv::Point sampleRate);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void FlowDriver::SetSamplePointsN(cv::Point pointsN);
	///
	/// Summary:	Sets sample points n.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// pointsN - 	The points n. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetSamplePointsN(cv::Point pointsN);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void FlowDriver::SetFlowVector(vector<FLOWVECTORTAG> inFlowVector);
	///
	/// Summary:	Sets flow vector.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// inFlowVector - 	The in flow vector. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetFlowVector(vector<FLOWVECTORTAG> inFlowVector);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void FlowDriver::Run(int selectLayer);
	///
	/// Summary:	Runs.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// selectLayer - 	The select layer. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void Run(int selectLayer);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void FlowDriver::Reset();
	///
	/// Summary:	Resets this object.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void Reset();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	vector<cv::Mat>GetResult();
	///
	/// Summary:	Default constructor.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Typeparams:
	/// cv::Mat - 	Type of the cv matrix. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	vector<cv::Mat>GetResult();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void FlowDriver::CombineLayer();
	///
	/// Summary:	Combine layer.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void CombineLayer();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void FlowDriver::UpdateOrgImg(cv::Mat In_orgImg);
	///
	/// Summary:	Updates the organisation image described by In_orgImg.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// In_orgImg - 	The in organisation image. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void UpdateOrgImg(cv::Mat In_orgImg);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void FlowDriver::ShowMattingMask();
	///
	/// Summary:	Shows the matting mask.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void ShowMattingMask();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void FlowDriver::SetFlowSpeed(int speedValue);
	///
	/// Summary:	Sets flow speed.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// speedValue - 	The speed value. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetFlowSpeed(int speedValue);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:
	/// 	void FlowDriver::MKvideo(const vector<cv::Mat>* const animatingResult, int Cycles = 1,
	/// 	string fileName = "out");
	///
	/// Summary:	Kvideoes.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// animatingResult - 	The animating result. 
	/// Cycles - 		  	(Optional) The cycles. 
	/// fileName - 		  	(Optional) Filename of the file. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void MKvideo(const vector<cv::Mat>* const animatingResult, int Cycles = 1, string fileName = "out");

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void FlowDriver::LoadParameter2Result(string filePath, string imgType, size_t resultSize);
	///
	/// Summary:	Loads parameter 2 result.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// filePath -   	Full pathname of the file. 
	/// imgType -    	Type of the image. 
	/// resultSize - 	Size of the result. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void LoadParameter2Result(string filePath, string imgType, size_t resultSize);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	cv::Point FlowDriver::GetOutputVideoParameter();
	///
	/// Summary:	Gets output video parameter.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Returns:	The output video parameter.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	cv::Point GetOutputVideoParameter();// (fps, totalFrame)

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	vector<vector<cv::Point> > FlowDriver::BoundryConstraints(cv::Mat inMask, bool Is_show);
	///
	/// Summary:	Boundry constraints.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// inMask -   	The in mask. 
	/// Is_show -  	True if is show, false if not. 
	///
	/// Returns:	A vector&lt;vector&lt;cv::Point&gt; &gt;
	////////////////////////////////////////////////////////////////////////////////////////////////////

	vector<vector<cv::Point> > BoundryConstraints(cv::Mat inMask, bool Is_show);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:
	/// 	void FlowDriver::Write2LayerArr(int selectLayer, vector<cv::Mat>*arrResultTmp,
	/// 	vector<thread>*threads);
	///
	/// Summary:	Writes a 2 layer array.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// selectLayer -  	The select layer. 
	/// arrResultTmp - 	[in,out] If non-null, the array result temporary. 
	/// threads - 	   	[in,out] If non-null, the threads. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void Write2LayerArr(int selectLayer, vector<cv::Mat>*arrResultTmp, vector<thread>*threads);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void FlowDriver::ShowResultVideo(const vector<cv::Mat>* const animatingResult);
	///
	/// Summary:	Shows the result video.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// animatingResult - 	The animating result. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void ShowResultVideo(const vector<cv::Mat>* const animatingResult);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void FlowDriver::InitMotionMap();
	///
	/// Summary:	Initializes the motion map.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void InitMotionMap();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void FlowDriver::InitBoundryWeight();
	///
	/// Summary:	Initializes the boundry weight.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	void InitBoundryWeight();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void FlowDriver::ThreadFunc(int frameCounter, double t, cv::Mat &resultTmp);
	///
	/// Summary:	Thread function.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// frameCounter - 	The frame counter. 
	/// t - 		   	A double to process. 
	/// resultTmp -    	[in,out] The result temporary. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void ThreadFunc(int frameCounter, double t, cv::Mat &resultTmp);	

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:
	/// 	cv::Point2d FlowDriver::CalculateTargetPoint(double dist, double radians,
	/// 	cv::Point2d selectedSrcPoint);
	///
	/// Summary:	Calculates the target point.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// dist - 			   	The distance. 
	/// radians - 		   	The radians. 
	/// selectedSrcPoint - 	The selected source point. 
	///
	/// Returns:	The calculated target point.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	cv::Point2d CalculateTargetPoint(double dist, double radians, cv::Point2d selectedSrcPoint);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	double FlowDriver::VirtualTheta(cv::Point2d& p, cv::Point2d& q);
	///
	/// Summary:	Virtual theta.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// p - 	   	[in,out] A cv::Point2d to process. 
	/// q - 	   	[in,out] A cv::Point2d to process. 
	///
	/// Returns:	A double.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	double VirtualTheta(cv::Point2d& p, cv::Point2d& q);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	double FlowDriver::EuclideanDist(cv::Point2d& p, cv::Point2d& q);
	///
	/// Summary:	Euclidean distance.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// p - 	   	[in,out] A cv::Point2d to process. 
	/// q - 	   	[in,out] A cv::Point2d to process. 
	///
	/// Returns:	A double.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	double EuclideanDist(cv::Point2d& p, cv::Point2d& q);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	WARPEDTAG FlowDriver::Warping(vector<cv::Point2d>timePoints, WARPEDTAG* pMarkMap);
	///
	/// Summary:	Warpings.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// parameter1 - 	The first parameter. 
	/// pMarkMap -   	[in,out] If non-null, the mark map. 
	///
	/// Returns:	A WARPEDTAG.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	WARPEDTAG Warping(vector<cv::Point2d>timePoints, WARPEDTAG* pMarkMap);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	cv::Vec3b FlowDriver::RGB_bilinearInterpolation(cv::Point2d p);
	///
	/// Summary:	RGB bilinear interpolation.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// p - 	A cv::Point2d to process. 
	///
	/// Returns:	A cv::Vec3b.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	cv::Vec3b RGB_bilinearInterpolation(cv::Point2d p);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	bool FlowDriver::IsFixedMaskOut(cv::Point2d p);
	///
	/// Summary:	Query if 'p' is fixed mask out.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// p - 	A cv::Point2d to process. 
	///
	/// Returns:	True if fixed mask out, false if not.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	bool IsFixedMaskOut(cv::Point2d p);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	double FlowDriver::CalculateCornerVector(cv::Point2d p);
	///
	/// Summary:	Calculates the corner vector.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// p - 	A cv::Point2d to process. 
	///
	/// Returns:	The calculated corner vector.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	double CalculateCornerVector(cv::Point2d p);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	vector<cv::Point2d>CalculateWarpingPath(double t);
	///
	/// Summary:	Constructor.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Typeparams:
	/// cv::Point2d - 	Type of the cv point 2D. 
	/// Parameters:
	/// t - 	A double to process. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	vector<cv::Point2d>CalculateWarpingPath(double t);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	bool FlowDriver::Is_integer(double inVal);
	///
	/// Summary:	Query if 'inVal' is integer.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// inVal - 	The in value. 
	///
	/// Returns:	True if integer, false if not.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	bool Is_integer(double inVal);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void FlowDriver::InitFlowPathSegment(int eachSegmentPoints, int overlap = 0);
	///
	/// Summary:	Initializes the flow path segment.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// eachSegmentPoints - 	The each segment points. 
	/// overlap - 				(Optional) The overlap. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void InitFlowPathSegment(int eachSegmentPoints, int overlap = 5);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void FlowDriver::UpdateFixedMask(cv::Mat inMask, int select);
	///
	/// Summary:	Updates the fixed mask.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// inMask -   	The in mask. 
	/// select -   	The select. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void UpdateFixedMask(cv::Mat inMask, int select);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	cv::Scalar FlowDriver::SelcetOrderColor(double step);
	///
	/// Summary:	Selcet order color.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// step - 	Amount to increment by. 
	///
	/// Returns:	A cv::Scalar.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	cv::Scalar SelcetOrderColor(double step);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void FlowDriver::SmoothBoundary(cv::Mat* pOutRange, cv::Mat* pWarpedResult, double t);
	///
	/// Summary:	Smooth boundary.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// pOutRange - 		[in,out] If non-null, the out range. 
	/// pWarpedResult - 	[in,out] If non-null, the warped result. 
	/// t - 				A double to process. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SmoothBoundary(cv::Mat* pOutRange, cv::Mat* pWarpedResult, double t);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:
	/// 	bool FlowDriver::IsBoundaryInROI(const cv::Mat* const img, cv::Point checkPoint,
	/// 	int width);
	///
	/// Summary:	Query if 'img' is boundary in roi.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// img - 		 	The image. 
	/// checkPoint - 	The check point. 
	/// width - 	 	The width. 
	///
	/// Returns:	True if boundary in roi, false if not.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	bool IsBoundaryInROI(const cv::Mat* const img, cv::Point checkPoint, int width);
	
	//variable	
	/// Summary:	The FPS.
	int fps;
	/// Summary:	The total frame.
	int totalFrame;
	/// Summary:	The each segment points.
	int eachSegmentPoints;
	/// Summary:	The thread number.
	int threadNum;
	/// Summary:	The is layer 0 empty.
	int isLayer0_Empty;
	/// Summary:	The is layer 1 empty.
	int isLayer1_Empty;
	/// Summary:	The block counter.
	int blockCounter;
	/// Summary:	The motion map.
	cv::Mat motionMap;
	/// Summary:	The trg weight.
	cv::Mat trgWeight;
	/// Summary:	The organisation image.
	cv::Mat orgImg;
	/// Summary:	The fixed mask.
	cv::Mat fixedMask;
	/// Summary:	The matting mask.
	cv::Mat mattingMask;
	/// Summary:	The matting alpha mask.
	cv::Mat mattingAlphaMask;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Property:	vector<cv::Mat>results
	///
	/// Summary:	Gets the mat>results.
	///
	/// Typeparams:
	/// cv::Mat - 	Type of the cv matrix. 
	///
	/// Value:
	////////////////////////////////////////////////////////////////////////////////////////////////////

	vector<cv::Mat>results;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Property:	vector<cv::Mat>L0_Results
	///
	/// Summary:	Gets the mat> l 0 results.
	///
	/// Typeparams:
	/// cv::Mat - 	Type of the cv matrix. 
	///
	/// Value:
	////////////////////////////////////////////////////////////////////////////////////////////////////

	vector<cv::Mat>L0_Results;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Property:	vector<cv::Mat>L1_Results
	///
	/// Summary:	Gets the mat> l 1 results.
	///
	/// Typeparams:
	/// cv::Mat - 	Type of the cv matrix. 
	///
	/// Value:
	////////////////////////////////////////////////////////////////////////////////////////////////////

	vector<cv::Mat>L1_Results;	
	/// Summary:	The boundry constraints.
	vector<vector<cv::Point> > boundryConstraints;
	/// Summary:	The user flow vector.
	vector<vector<FLOWVECTORTAG>> userFlowVector;
	/// Summary:	Array of user paths.
	vector<vector<cv::Point>> userPathArr;
	/// Summary:	The flow path segment.
	vector<vector<cv::Point>> flowPathSegment;
	//flowVector variable
	/// Summary:	each n pixels sample.
	int rowSampleRate;
	/// Summary:	each n pixels sample.
	int colSampleRate;
	/// Summary:	Row points.
	int rowPointsN;
	/// Summary:	Col points.
	int colPointsN;
	vector<FLOWVECTORTAG> flowVector;
};

#endif // FLOWDRIVER_H