////////////////////////////////////////////////////////////////////////////////////////////////////
/// File:	morphing.h.
///
/// Summary:	Declares the morphing class.
////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include<iostream>
#include<string>
#include<vector>
#include <sstream>

#include<opencv2\opencv.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////
/// Def:	IMAGE_PATH
///
/// Summary:	A macro that defines image path.
///
/// Author:	Yc Lin
///
/// Date:	2019/10/4
////////////////////////////////////////////////////////////////////////////////////////////////////

#define IMAGE_PATH "../picture/"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// Def:	RESULT_PATH
///
/// Summary:	A macro that defines result path.
///
/// Author:	Yc Lin
///
/// Date:	2019/10/4
////////////////////////////////////////////////////////////////////////////////////////////////////

#define RESULT_PATH "../morphingResult/"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// Namespace:	std
///
/// Summary:	.
////////////////////////////////////////////////////////////////////////////////////////////////////

using namespace std;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// Struct:	lineVertex
///
/// Summary:	A line vertex.
///
/// Author:	Yc Lin.
///
/// Date:	2019/10/4.
////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct lineVertex{
	cv::Point2f begVertex;
	/// Summary:	The end vertex.
	cv::Point2f endVertex;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	lineVertex()
	///
	/// Summary:	Default constructor.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	////////////////////////////////////////////////////////////////////////////////////////////////////

	lineVertex(){
		begVertex.x = -1;
		begVertex.y = -1;
		endVertex.x = -1;
		endVertex.y = -1;
	}
};

/// Summary:	Full pathname of the image file.
const string imgPath = IMAGE_PATH;
/// Summary:	Full pathname of the result file.
const string resultPath = RESULT_PATH;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// Class:	morphing
///
/// Summary:	A morphing.
///
/// Author:	Yc Lin
///
/// Date:	2019/10/4
////////////////////////////////////////////////////////////////////////////////////////////////////

class morphing
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	morphing::morphing(string fileName);
	///
	/// Summary:	Constructor.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// fileName - 	Filename of the file. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	morphing(string fileName);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void morphing::Run();
	///
	/// Summary:	Runs this object.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void Run();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	morphing::~morphing();
	///
	/// Summary:	Destructor.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	////////////////////////////////////////////////////////////////////////////////////////////////////

	~morphing();
private:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void morphing::on_Mouse(int Event, int x, int y);
	///
	/// Summary:	Executes the mouse action.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// Event -    	The event. 
	/// x - 	   	The x coordinate. 
	/// y - 	   	The y coordinate. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void on_Mouse(int Event, int x, int y);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	static void morphing::onMouse(int Event, int x, int y, int flags, void* userdata);
	///
	/// Summary:	Executes the mouse action.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// Event -    	The event. 
	/// x - 	   	The x coordinate. 
	/// y - 	   	The y coordinate. 
	/// flags -    	The flags. 
	/// userdata - 	[in,out] If non-null, the userdata. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	static void onMouse(int Event, int x, int y, int flags, void* userdata);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	cv::Mat morphing::morphingCalculate(cv::Mat src, cv::Mat dst, float morphingT);
	///
	/// Summary:	Morphing calculate.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// src - 			Source for the. 
	/// dst - 			Destination for the. 
	/// morphingT - 	The morphing t. 
	///
	/// Returns:	A cv::Mat.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	cv::Mat morphingCalculate(cv::Mat src, cv::Mat dst, float morphingT);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	void morphing::MKvideo(cv::Mat morphingResult[], int totalFrame);
	///
	/// Summary:	Kvideoes.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// morphingResult - 	The morphing result. 
	/// totalFrame - 	 	The total frame. 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void MKvideo(cv::Mat morphingResult[], int totalFrame);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	float morphing::PointDot(cv::Point2f a, cv::Point2f b);
	///
	/// Summary:	Point dot.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// a - 	   	A cv::Point2f to process. 
	/// b - 	   	A cv::Point2f to process. 
	///
	/// Returns:	A float.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	float PointDot(cv::Point2f a, cv::Point2f b);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	bool morphing::IsBoundaryOut(cv::Mat img, float *x, float *y);
	///
	/// Summary:	Query if 'img' is boundary out.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// img - 	   	The image. 
	/// x - 	   	[in,out] If non-null, a float to process. 
	/// y - 	   	[in,out] If non-null, a float to process. 
	///
	/// Returns:	True if boundary out, false if not.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	bool IsBoundaryOut(cv::Mat img, float *x, float *y);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	bool morphing::IsBoundaryOut(cv::Mat img, int *x, int *y);
	///
	/// Summary:	Query if 'img' is boundary out.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// img - 	   	The image. 
	/// x - 	   	[in,out] If non-null, the x coordinate. 
	/// y - 	   	[in,out] If non-null, the y coordinate. 
	///
	/// Returns:	True if boundary out, false if not.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	bool IsBoundaryOut(cv::Mat img, int *x, int *y);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:
	/// 	cv::Mat morphing::warp(const cv::Mat src, const vector<lineVertex>morphingVector,
	/// 	int selectSrc);
	///
	/// Summary:	Warps.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// src - 							   	Source for the. 
	/// vector<lineVertex>morphingVector - 	The vector. 
	/// selectSrc - 					   	The select source. 
	///
	/// Returns:	A cv::Mat.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	cv::Mat warp(const cv::Mat src, const vector<lineVertex>morphingVector, int selectSrc);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	float morphing::weigthDist(float u, lineVertex line, cv::Point2f newX, float v);
	///
	/// Summary:	Weigth distance.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// u - 	   	A float to process. 
	/// line - 	   	The line. 
	/// newX - 	   	The new x coordinate. 
	/// v - 	   	The value. 
	///
	/// Returns:	A float.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	float weigthDist(float u, lineVertex line, cv::Point2f newX, float v);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Fn:	string morphing::Float2Str(float number);
	///
	/// Summary:	Float 2 string.
	///
	/// Author:	Yc Lin
	///
	/// Date:	2019/10/4
	///
	/// Parameters:
	/// number - 	Number of. 
	///
	/// Returns:	A string.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	string Float2Str(float number);

	/// Summary:	The temporary global.
	lineVertex tmp_global;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Property:	vector<lineVertex>srcFeatureVector
	///
	/// Summary:	Gets the vector.
	///
	/// Typeparams:
	/// lineVertex - 	Type of the line vertex. 
	///
	/// Value:
	////////////////////////////////////////////////////////////////////////////////////////////////////

	vector<lineVertex>srcFeatureVector;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Property:	vector<lineVertex>dstFeatureVector
	///
	/// Summary:	Gets the vector.
	///
	/// Typeparams:
	/// lineVertex - 	Type of the line vertex. 
	///
	/// Value:
	////////////////////////////////////////////////////////////////////////////////////////////////////

	vector<lineVertex>dstFeatureVector;
	/// Summary:	The image flag.
	int imgFlag;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Property:	cv::Mat orgSrc, orgDst, src, dst
	///
	/// Summary:	Gets the Destination for the.
	///
	/// Returns:	The destination.
	////////////////////////////////////////////////////////////////////////////////////////////////////

	cv::Mat orgSrc, orgDst, src, dst;
	string srcWin, dstWin;
};

